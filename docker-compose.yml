version: '3.8'

services:
  # API Gateway
  api-gateway:
    build:
      context: .
      dockerfile: docker/api-gateway.Dockerfile
    ports:
      - "8000:8000"
    environment:
      - SERVICE_DISCOVERY_URL=http://service-discovery:8500
      - AUTH_SERVICE_URL=http://auth-service:8001
      - DOCUMENT_SERVICE_URL=http://document-service:8002
      - SEARCH_SERVICE_URL=http://search-service:8003
      - ANALYTICS_SERVICE_URL=http://analytics-service:8004
      - ADMIN_SERVICE_URL=http://admin-service:8005
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=${JWT_SECRET}
    depends_on:
      - service-discovery
      - redis
    networks:
      - astrarag-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Authentication Service
  auth-service:
    build:
      context: .
      dockerfile: docker/auth-service.Dockerfile
    ports:
      - "8001:8001"
    environment:
      - POSTGRES_URL=postgresql://astrarag:password@postgres:5432/astrarag_auth
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=${JWT_SECRET}
      - SERVICE_DISCOVERY_URL=http://service-discovery:8500
    depends_on:
      - postgres
      - redis
      - service-discovery
    networks:
      - astrarag-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Document Service
  document-service:
    build:
      context: .
      dockerfile: docker/document-service.Dockerfile
    ports:
      - "8002:8002"
    environment:
      - POSTGRES_URL=postgresql://astrarag:password@postgres:5432/astrarag_documents
      - REDIS_URL=redis://redis:6379
      - MINIO_ENDPOINT=minio:9000
      - MINIO_ACCESS_KEY=${MINIO_ACCESS_KEY}
      - MINIO_SECRET_KEY=${MINIO_SECRET_KEY}
      - ELASTICSEARCH_URL=http://elasticsearch:9200
      - SERVICE_DISCOVERY_URL=http://service-discovery:8500
    depends_on:
      - postgres
      - redis
      - minio
      - elasticsearch
      - service-discovery
    networks:
      - astrarag-network
    volumes:
      - ./data/uploaded_docs:/app/data/uploaded_docs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8002/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Search Service
  search-service:
    build:
      context: .
      dockerfile: docker/search-service.Dockerfile
    ports:
      - "8003:8003"
    environment:
      - ELASTICSEARCH_URL=http://elasticsearch:9200
      - REDIS_URL=redis://redis:6379
      - SERVICE_DISCOVERY_URL=http://service-discovery:8500
    depends_on:
      - elasticsearch
      - redis
      - service-discovery
    networks:
      - astrarag-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8003/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Analytics Service
  analytics-service:
    build:
      context: .
      dockerfile: docker/analytics-service.Dockerfile
    ports:
      - "8004:8004"
    environment:
      - POSTGRES_URL=postgresql://astrarag:password@postgres:5432/astrarag_analytics
      - REDIS_URL=redis://redis:6379
      - SERVICE_DISCOVERY_URL=http://service-discovery:8500
    depends_on:
      - postgres
      - redis
      - service-discovery
    networks:
      - astrarag-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8004/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Admin Service
  admin-service:
    build:
      context: .
      dockerfile: docker/admin-service.Dockerfile
    ports:
      - "8005:8005"
    environment:
      - POSTGRES_URL=postgresql://astrarag:password@postgres:5432/astrarag_admin
      - REDIS_URL=redis://redis:6379
      - SERVICE_DISCOVERY_URL=http://service-discovery:8500
    depends_on:
      - postgres
      - redis
      - service-discovery
    networks:
      - astrarag-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8005/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Databases and Infrastructure
  postgres:
    image: postgres:15-alpine
    environment:
      - POSTGRES_USER=astrarag
      - POSTGRES_PASSWORD=password
      - POSTGRES_DB=astrarag
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    networks:
      - astrarag-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U astrarag"]
      interval: 30s
      timeout: 10s
      retries: 3

  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - astrarag-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ports:
      - "9200:9200"
      - "9300:9300"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - astrarag-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  minio:
    image: minio/minio:latest
    environment:
      - MINIO_ACCESS_KEY=${MINIO_ACCESS_KEY:-astrarag}
      - MINIO_SECRET_KEY=${MINIO_SECRET_KEY:-astrarag-secret}
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio_data:/data
    networks:
      - astrarag-network
    command: server /data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 10s
      retries: 3

  service-discovery:
    image: consul:1.15
    ports:
      - "8500:8500"
      - "8600:53/udp"
    volumes:
      - consul_data:/consul/data
    networks:
      - astrarag-network
    command: agent -server -bootstrap -ui -client=0.0.0.0 -bind=127.0.0.1
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8500/v1/status/leader"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  postgres_data:
  redis_data:
  elasticsearch_data:
  minio_data:
  consul_data:

networks:
  astrarag-network:
    driver: bridge